# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import time, datetime
from PyQt5.QtCore import pyqtSlot, QDate, QThread,pyqtSignal, Qt
from PyQt5.QtGui import QImage, QPixmap
from core.ATGT import ATGT
import cv2
from  core.database.database import Database

import json
import numpy as np

import socket 
import cv2 
import struct
import pickle


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self, path_cfg = 'core/config/cfg.json'):
        super().__init__()

        self.host = ''
        self.port = 8888

        with open(path_cfg, 'r') as f:
            cfg = json.load(f)
        speed_estimate_area = cfg['speed_estimate_area']
        tracking_area = cfg['tracking_area']
        deadline = cfg['deadline']
        estimateKM = cfg['estimateKM']
        max_speed_motocycle  = cfg['max_speed_motocycle']
        max_speed_car = cfg['max_speed_car']
        max_speed_truck = cfg['max_speed_truck']
        max_speed_bus = cfg['max_speed_bus']
        max_speed_tricycle = cfg['max_speed_tricycle']
        self.traffic_light = 'green'
        self.atgt = ATGT( speed_estimate_area,speed_estimate_area, deadline, estimateKM,max_speed_motocycle, max_speed_car, max_speed_truck, max_speed_bus, max_speed_tricycle, 0.3)
        self.atgt.init_model()
        
        
    def run(self):
        # cam = cv2.VideoCapture( r"videotest\91.mp4")#91
        # time_now = 0
        # cftl = 0
        # if not cam.isOpened(): 
        #     # self.atgt.TrafficLight.stop = True
        #     raise Exception('Could not open video')
        # while True:
        #     ret, img = cam.read()
        #     if ret:
        #         img = self.atgt.FrameByFrame(img, time_now, self.traffic_light) 
        #         time_now += 1/30
        #         cftl+=1
        #         if cftl%300==0:
        #             if self.traffic_light == 'green':
        #                 self.traffic_light = 'red'

        #             else: 
        #                 self.traffic_light = 'green'
        
        client_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        # host_ip = self.hos#'192.168.1.6' # Here provide Drone IP 
        # port = 9999
        client_socket.connect((self.host,self.port))
        data = b""
        payload_size = struct.calcsize("Q")
        while True:
            timen = time.time()
            while len(data) < payload_size:
                packet = client_socket.recv(1024) 
                if not packet: break
                data+=packet
            packed_msg_size = data[:payload_size]
            data = data[payload_size:]
            msg_size = struct.unpack("Q",packed_msg_size)[0]
            while len(data) < msg_size:
                data += client_socket.recv(9000*1024)

            lst_inf_packed = data[:msg_size]
            data  = data[msg_size:]
            lst_inf = pickle.loads(lst_inf_packed)
            # cv2.imshow("RECEIVING VIDEO FROM CACHE SERVER",lst_inf[0])
            # key = cv2.waitKey(1) & 0xFF
            # if key  == ord('q'):break

            img = self.atgt.FrameByFrame(lst_inf[0], lst_inf[1], lst_inf[2]) 
            self.change_pixmap_signal.emit(img)



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        # tao luong xu ly hinh anh 

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1381, 855)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1381, 831))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.groupBox = QtWidgets.QGroupBox(self.tab_5)
        self.groupBox.setGeometry(QtCore.QRect(1170, 220, 201, 571))
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(10, 30, 171, 41))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_fps = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_fps.setFont(font)
        self.label_fps.setObjectName("label_fps")
        self.horizontalLayout_4.addWidget(self.label_fps)
        self.label_value_fps = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_value_fps.setFont(font)
        self.label_value_fps.setObjectName("label_value_fps")
        self.horizontalLayout_4.addWidget(self.label_value_fps)
        self.horizontalLayoutWidget_4 = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget_4.setGeometry(QtCore.QRect(10, 90, 171, 41))
        self.horizontalLayoutWidget_4.setObjectName("horizontalLayoutWidget_4")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_4)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_total = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_total.setFont(font)
        self.label_total.setObjectName("label_total")
        self.horizontalLayout_5.addWidget(self.label_total)
        self.label_value_total = QtWidgets.QLabel(self.horizontalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_value_total.setFont(font)
        self.label_value_total.setObjectName("label_value_total")
        self.horizontalLayout_5.addWidget(self.label_value_total)
        self.horizontalLayoutWidget_5 = QtWidgets.QWidget(self.groupBox)
        self.horizontalLayoutWidget_5.setGeometry(QtCore.QRect(10, 160, 171, 41))
        self.horizontalLayoutWidget_5.setObjectName("horizontalLayoutWidget_5")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_5)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_in_red_place = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_in_red_place.setFont(font)
        self.label_in_red_place.setObjectName("label_in_red_place")
        self.horizontalLayout_6.addWidget(self.label_in_red_place)
        self.label_value_in_red_place = QtWidgets.QLabel(self.horizontalLayoutWidget_5)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_value_in_red_place.setFont(font)
        self.label_value_in_red_place.setObjectName("label_value_in_red_place")
        ##
        self.horizontalLayout_6.addWidget(self.label_value_in_red_place)
        self.lblHost = QtWidgets.QLabel(self.groupBox)
        self.lblHost.setGeometry(QtCore.QRect(10, 260, 31, 31))
        self.lblHost.setObjectName("lblHost")
        self.lblPort = QtWidgets.QLabel(self.groupBox)
        self.lblPort.setGeometry(QtCore.QRect(10, 320, 47, 31))
        self.lblPort.setObjectName("lblPort")
        self.txtHost = QtWidgets.QTextEdit(self.groupBox)
        self.txtHost.setGeometry(QtCore.QRect(40, 260, 141, 31))
        self.txtHost.setObjectName("txtHost")
        self.txtPort = QtWidgets.QTextEdit(self.groupBox)
        self.txtPort.setGeometry(QtCore.QRect(70, 320, 111, 31))
        self.txtPort.setObjectName("txtPort")
        self.ptnGo = QtWidgets.QPushButton(self.groupBox)
        self.ptnGo.setGeometry(QtCore.QRect(60, 380, 75, 23))
        self.ptnGo.setObjectName("ptnGo")
        self.verticalLayoutWidget_4 = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget_4.setGeometry(QtCore.QRect(1170, 10, 191, 80))
        self.verticalLayoutWidget_4.setObjectName("verticalLayoutWidget_4")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_4)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_date = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_date.setFont(font)
        self.label_date.setObjectName("label_date")
        self.horizontalLayout.addWidget(self.label_date)
        self.label_value_date = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_value_date.setFont(font)
        self.label_value_date.setObjectName("label_value_date")
        self.horizontalLayout.addWidget(self.label_value_date)
        self.verticalLayout_4.addLayout(self.horizontalLayout)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_time = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_time.setFont(font)
        self.label_time.setObjectName("label_time")
        self.horizontalLayout_3.addWidget(self.label_time)
        self.label_value_time = QtWidgets.QLabel(self.verticalLayoutWidget_4)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_value_time.setFont(font)
        self.label_value_time.setObjectName("label_value_time")
        self.horizontalLayout_3.addWidget(self.label_value_time)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.tab_5)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(1170, 100, 191, 107))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.checkBox_deadline = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_deadline.setObjectName("checkBox_deadline")
        self.verticalLayout.addWidget(self.checkBox_deadline)
        self.checkBox_bb = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_bb.setObjectName("checkBox_bb")
        self.verticalLayout.addWidget(self.checkBox_bb)
        self.checkBox_area = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_area.setObjectName("checkBox_area")
        self.verticalLayout.addWidget(self.checkBox_area)
        self.checkBox_his = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.checkBox_his.setObjectName("checkBox_his")
        self.verticalLayout.addWidget(self.checkBox_his)
        self.lbl_Image = QtWidgets.QLabel(self.tab_5)
        self.lbl_Image.setGeometry(QtCore.QRect(0, 10, 1161, 781))
        self.lbl_Image.setText("")
        self.lbl_Image.setObjectName("lbl_Image")
        self.tabWidget.addTab(self.tab_5, "")
        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")
        self.tableWidget = QtWidgets.QTableWidget(self.tab_6)
        self.tableWidget.setGeometry(QtCore.QRect(10, 10, 1361, 741))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.tableWidget.setFont(font)
        self.tableWidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(7)
        self.tableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        self.btn_reload = QtWidgets.QPushButton(self.tab_6)
        self.btn_reload.setGeometry(QtCore.QRect(1250, 760, 111, 31))
        self.btn_reload.setObjectName("btn_reload")
        self.tabWidget.addTab(self.tab_6, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1381, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ##################################

        self.btn_reload.clicked.connect(self.reloadDataBase)
        self.checkBox_deadline.stateChanged.connect(self.checkBoxDeadline)
        self.checkBox_bb.stateChanged.connect(self.checkBoxBoundingBox)
        self.checkBox_area.stateChanged.connect(self.checkBoxArea)
        self.checkBox_his.stateChanged.connect(self.checkBoxHistory)
        self.ptnGo.clicked.connect(self.start)
        


    def retranslateUi(self, MainWindow):

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Details"))
        self.label_fps.setText(_translate("MainWindow", "FPS:"))
        self.label_value_fps.setText(_translate("MainWindow", "-"))
        self.label_total.setText(_translate("MainWindow", "Total vehicle: "))
        self.label_value_total.setText(_translate("MainWindow", "-"))
        self.label_in_red_place.setText(_translate("MainWindow", "In red place: "))
        self.label_value_in_red_place.setText(_translate("MainWindow", "-"))
        self.lblHost.setText(_translate("MainWindow", "Host:"))
        self.lblPort.setText(_translate("MainWindow", "Port:"))
        self.ptnGo.setText(_translate("MainWindow", "Go!!!"))
        self.label_date.setText(_translate("MainWindow", "Date: "))
        self.label_value_date.setText(_translate("MainWindow", datetime.datetime.now().strftime("%d %b %Y ")))
        self.label_time.setText(_translate("MainWindow", "Time: "))
        self.label_value_time.setText(_translate("MainWindow", "-"))
        self.label.setText(_translate("MainWindow", "Lựa chọn hiển thị"))
        self.checkBox_deadline.setText(_translate("MainWindow", "Hiển thị vạch dừng đèn đỏ"))
        self.checkBox_bb.setText(_translate("MainWindow", "Hiển thị bounding box"))
        self.checkBox_area.setText(_translate("MainWindow", "Hiển thị khu vực detection"))
        self.checkBox_his.setText(_translate("MainWindow", "Hiển thị lịch sử di chuyển "))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Tab 1"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "ID"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Loại phương tiện"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Loại tội phạm"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Vận tốc"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Biển số xe"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Thời gian"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Hình ảnh"))
        self.tableWidget.setColumnWidth(0,200)
        self.tableWidget.setColumnWidth(1,200)
        self.tableWidget.setColumnWidth(2,200)
        self.tableWidget.setColumnWidth(3,200)
        self.tableWidget.setColumnWidth(4,200)
        self.tableWidget.setColumnWidth(5,200)
        self.tableWidget.setColumnWidth(6,200)
        self.btn_reload.setText(_translate("MainWindow", "Reload"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_6), _translate("MainWindow", "Tab 2"))


    def start(self):
        
         # create the video capture thread
        self.thread = VideoThread()
        self.thread.host = str(self.txtHost.toPlainText())
        self.thread.port = int(self.txtPort.toPlainText())

        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()
    def reloadDataBase(self):
        rows = self.thread.atgt.db.get_all()
        self.tableWidget.setRowCount(len(rows)+1)
        for i, row in enumerate(rows):
            self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(str(row[0])))
            self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(row[1]))
            self.tableWidget.setItem(i, 2, QtWidgets.QTableWidgetItem(row[3]))
            self.tableWidget.setItem(i, 3, QtWidgets.QTableWidgetItem(str(row[2])))
            self.tableWidget.setItem(i, 4, QtWidgets.QTableWidgetItem(row[5]))
            self.tableWidget.setItem(i, 5, QtWidgets.QTableWidgetItem(str(row[6])))
            self.tableWidget.setCellWidget(i, 6, self.getImageLabel(row[4]) )      
        self.tableWidget.verticalHeader().setDefaultSectionSize(100)

    def checkBoxDeadline(self, state):
        if (QtCore.Qt.Checked == state):
            self.thread.atgt.show_deadline = True
        else:
            self.thread.atgt.show_deadline = False
    def checkBoxBoundingBox(self, state):
        if (QtCore.Qt.Checked == state):
            self.thread.atgt.show_bb = True
        else:
            self.thread.atgt.show_bb = False
    def checkBoxHistory(self, state):
        if (QtCore.Qt.Checked == state):
            self.thread.atgt.show_his = True
        else:
            self.thread.atgt.show_his = False
    def checkBoxArea(self, state):
        if (QtCore.Qt.Checked == state):
            self.thread.atgt.show_handel_area = True
        else:
            self.thread.atgt.show_handel_area = False
    


    def update_image(self,cv_img):
        qt_img = self.convert_cv_qt(cv_img)
        self.lbl_Image.setPixmap(qt_img)
        self.label_value_total.setText(str(len(self.thread.atgt.inf)))
        self.label_value_fps.setText(str(int(self.thread.atgt.fps)))
        self.label_value_in_red_place.setText(str(self.thread.atgt.current_in_red_place))

    
    def getImageLabel(self,image):
        imageLabel = QtWidgets.QLabel(self.centralwidget)
        imageLabel.setText("")
        imageLabel.setScaledContents(True)

        h, w, ch = image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        imageLabel.setPixmap(QPixmap.fromImage(convert_to_Qt_format))
        return imageLabel
        
    
    def convert_cv_qt_no_change_rgb(self, image):
        imageLabel = QtWidgets.QLabel(self.centralwidget)
        imageLabel.setText("")
        imageLabel.setScaledContents(True)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        h, w, ch = image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        imageLabel.setPixmap(QPixmap.fromImage(convert_to_Qt_format))
        return imageLabel
    
    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.lbl_Image.width(), self.lbl_Image.height(), Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)
    

    



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    iu = Ui_MainWindow()
    iu.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())